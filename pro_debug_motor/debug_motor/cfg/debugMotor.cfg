#! /usr/bin/env python

PACKAGE='debug_motor'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name       Type      Level Description                Default Min   Max
operate_object_enum = gen.enum([ gen.const("no_operation", int_t, 0, "No operation"),
	gen.const("shake_hand_frame", int_t, 1, "Enable send shake hand frame"),
	gen.const("identify_frame", int_t, 2, "Enable sending identification frame"),
	gen.const("save_command", int_t, 3, "Enable sending save frame "),
	gen.const("alter_com_mode", int_t, 4, "Enable altering  communication mode "),
	
	gen.const("operate_bit", int_t, 5, "Enable operating  bit"),
	gen.const("operate_byte", int_t, 6, "Enable operating  byte"),
	gen.const("operate_word", int_t, 7, "Enable operating  word"),
	gen.const("operate_l_word", int_t, 8, "Enable operating  long word") , 
	gen.const("batch_read", int_t, 9, "Enable ") , 
	gen.const("batch_write", int_t, 10, "Enable operating  string")],"An enum to set the oper_object.")

read_write_enum = gen.enum([ gen.const("No_read_write", int_t, 0, "A small constant"),
	gen.const("read", int_t, 1, "Enable read") ,
	gen.const("write", int_t, 2, "Enable write") ],"An enum to set the read or write.")
	
gen.add("operate_object", int_t,    0,    "A operate_object parameter which is edited via an enum.",0 ,0,10, edit_method=operate_object_enum)
gen.add("read_write", int_t,    0,    "A read_write parameter which is edited via an enum.", 0,0,2, edit_method=read_write_enum)

gen.add("page_index",  int_t,   0,    "set page index.",  0,0,100)
gen.add("pos_index",  int_t,   0,    "set position index.",  0,0,100)
gen.add("nth_bit",  int_t,   0,    "set nth bit .",  0,0,10)
gen.add("set_val",  int_t,   0,    "set value.",  0,-2147483648,2147483647)
gen.add("send_params", bool_t,    0,    "enable.",   False)
#gen.add("batch_read", bool_t,    0,    "enable.",   False)

control_mode_enum = gen.enum([ gen.const("no_control_mode", int_t, 0, "No control "),
	gen.const("speed_control", int_t, 1, "Enable speed control") ,
	gen.const("torque_control", int_t, 2, "Enable torque control"),
	gen.const("motor_power_on", int_t, 3, "Enable power on control"),
	gen.const("motor_power_off", int_t, 4, "Enable power off control"),
	gen.const("motor_sysch_enable", int_t, 5, "Enable syschronic control"),
	 ],"An enum to set the contorl mode.")
gen.add("control_mode", int_t,    0,    "A contorl_mode parameter which is edited via an enum.", 0,0,5, edit_method=control_mode_enum)

gen.add("motor_id",  int_t,   0,    "Setting motor ID.",  0,0,6)
gen.add("set_speed_rpm",  int_t,   0,    "Setting speed with 0.01rpm.",  0,-2147483648,2147483647)
gen.add("set_torque_Nm",  int_t,   0,    "Setting torque with 0.01N.m.", 0, -2147483648,2147483647)
gen.add("send_CAN", bool_t,    0,    "enable.",   False)

exit(gen.generate(PACKAGE, "debug_motor", "debugMotor"))
